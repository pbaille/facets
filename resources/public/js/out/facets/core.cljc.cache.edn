{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{extend-type reify}, :name facets.core, :imports nil, :requires nil, :uses nil, :defs {declare-type* {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 166, :column 7, :end-line 166, :end-column 20, :arglists (quote ([{:keys [id constructor facets spec gen]}]))}, :name facets.core/declare-type*, :variadic false, :file "src/facets/core.cljc", :end-column 20, :method-params ([p__38724]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [id constructor facets spec gen]}]))}, <fs {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 294, :column 7, :end-line 294, :end-column 10, :arglists (quote ([t])), :doc "get all facets implementations for the given type"}, :name facets.core/<fs, :variadic false, :file "src/facets/core.cljc", :end-column 10, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "get all facets implementations for the given type"}, t {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 49, :column 7, :end-line 49, :end-column 8, :arglists (quote ([e] [sym e])), :doc "artity 2: assign type sym to e\n   arity 1: get the type tag of e", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([e] [sym e]), :arglists ([e] [sym e]), :arglists-meta (nil nil)}}, :name facets.core/t, :variadic false, :file "src/facets/core.cljc", :end-column 8, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([e] [sym e]), :arglists ([e] [sym e]), :arglists-meta (nil nil)}, :method-params ([e] [sym e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists ([e] [sym e]), :doc "artity 2: assign type sym to e\n   arity 1: get the type tag of e"}, prefs {:name facets.core/prefs, :file "src/facets/core.cljc", :line 21, :column 1, :end-line 21, :end-column 11, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 21, :column 6, :end-line 21, :end-column 11}}, aliases {:name facets.core/aliases, :file "src/facets/core.cljc", :line 18, :column 1, :end-line 18, :end-column 13, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 18, :column 6, :end-line 18, :end-column 13}}, assert-type {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 82, :column 7, :end-line 82, :end-column 18, :arglists (quote ([name]))}, :name facets.core/assert-type, :variadic false, :file "src/facets/core.cljc", :end-column 18, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, known-types {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 42, :column 7, :end-line 42, :end-column 18, :arglists (quote ([]))}, :name facets.core/known-types, :variadic false, :file "src/facets/core.cljc", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, assert-nskw {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 74, :column 7, :end-line 74, :end-column 18, :arglists (quote ([name]))}, :name facets.core/assert-nskw, :variadic false, :file "src/facets/core.cljc", :end-column 18, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, extend-facets {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 256, :column 7, :end-line 256, :end-column 20, :arglists (quote ([m]))}, :name facets.core/extend-facets, :variadic false, :file "src/facets/core.cljc", :end-column 20, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, no-default-handler {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 260, :column 8, :end-line 260, :end-column 26, :private true, :arglists (quote ([f]))}, :private true, :name facets.core/no-default-handler, :variadic false, :file "src/facets/core.cljc", :end-column 26, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, derived-impl-map {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 309, :column 7, :end-line 309, :end-column 23, :arglists (quote ([parents impl-map]))}, :name facets.core/derived-impl-map, :variadic false, :file "src/facets/core.cljc", :end-column 23, :method-params ([parents impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parents impl-map]))}, known-type? {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 45, :column 7, :end-line 45, :end-column 18, :arglists (quote ([t]))}, :name facets.core/known-type?, :variadic false, :file "src/facets/core.cljc", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, any {:name facets.core/any, :file "src/facets/core.cljc", :line 147, :column 1, :end-line 147, :end-column 9, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 147, :column 6, :end-line 147, :end-column 9}}, parse-declare-type-args {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 159, :column 8, :end-line 159, :end-column 31, :private true, :arglists (quote ([constructor impl-map & [parent]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(constructor impl-map [parent])], :arglists ([constructor impl-map & [parent]]), :arglists-meta (nil)}}, :private true, :name facets.core/parse-declare-type-args, :variadic true, :file "src/facets/core.cljc", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(constructor impl-map [parent])], :arglists ([constructor impl-map & [parent]]), :arglists-meta (nil)}, :method-params [(constructor impl-map [parent])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists ([constructor impl-map & [parent]])}, compiled-call {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 369, :column 7, :end-line 369, :end-column 20, :arglists (quote ([])), :doc "maybe it should be a way to improve perfs,\n   at some point, when the user has defined all his types,\n   we could compile the dispatch mecanism from the current state, and return a faster call-fn...\n   Maybe it is not possible..."}, :name facets.core/compiled-call, :variadic false, :file "src/facets/core.cljc", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 369, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "maybe it should be a way to improve perfs,\n   at some point, when the user has defined all his types,\n   we could compile the dispatch mecanism from the current state, and return a faster call-fn...\n   Maybe it is not possible..."}, register-default-impl {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 269, :column 8, :end-line 269, :end-column 29, :private true, :arglists (quote ([name impl-map]))}, :private true, :name facets.core/register-default-impl, :variadic false, :file "src/facets/core.cljc", :end-column 29, :method-params ([name impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name impl-map]))}, t? {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 56, :column 7, :end-line 56, :end-column 9, :arglists (quote ([sym e])), :doc "check if e is of type sym"}, :name facets.core/t?, :variadic false, :file "src/facets/core.cljc", :end-column 9, :method-params ([sym e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sym e])), :doc "check if e is of type sym"}, declare-facet {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 276, :column 7, :end-line 276, :end-column 20, :arglists (quote ([name & [impl-map]])), :doc "declare a new facet, just a fancy name for behavior or method\n   ex:\n   (declare-facet ::say-hello\n     {::type1 (fn [x] (println \"hello from type 1\"))\n      ::type2 (fn [x] (println \"hello from type 2\"))\n      :default (fn [x] (println \"default hello from a type that doesn't implement ::say-hello))})", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name [impl-map])], :arglists ([name & [impl-map]]), :arglists-meta (nil)}}, :name facets.core/declare-facet, :variadic true, :file "src/facets/core.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name [impl-map])], :arglists ([name & [impl-map]]), :arglists-meta (nil)}, :method-params [(name [impl-map])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 1, :fn-var true, :arglists ([name & [impl-map]]), :doc "declare a new facet, just a fancy name for behavior or method\n   ex:\n   (declare-facet ::say-hello\n     {::type1 (fn [x] (println \"hello from type 1\"))\n      ::type2 (fn [x] (println \"hello from type 2\"))\n      :default (fn [x] (println \"default hello from a type that doesn't implement ::say-hello))})"}, assert-new-facet {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 86, :column 7, :end-line 86, :end-column 23, :arglists (quote ([name]))}, :name facets.core/assert-new-facet, :variadic false, :file "src/facets/core.cljc", :end-column 23, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, assert-facet-impl-map {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 109, :column 7, :end-line 109, :end-column 28, :arglists (quote ([impl-map]))}, :name facets.core/assert-facet-impl-map, :variadic false, :file "src/facets/core.cljc", :end-column 28, :method-params ([impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([impl-map]))}, declare-aliases {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 198, :column 7, :end-line 198, :end-column 22, :arglists (quote ([hm]))}, :name facets.core/declare-aliases, :variadic false, :file "src/facets/core.cljc", :end-column 22, :method-params ([hm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hm]))}, prefer {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 202, :column 7, :end-line 202, :end-column 13, :arglists (quote ([type & types])), :doc "register a type preference,\n   'type' will be prefered over 'types'", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(type types)], :arglists ([type & types]), :arglists-meta (nil)}}, :name facets.core/prefer, :variadic true, :file "src/facets/core.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(type types)], :arglists ([type & types]), :arglists-meta (nil)}, :method-params [(type types)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists ([type & types]), :doc "register a type preference,\n   'type' will be prefered over 'types'"}, assert-existing-derivations {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 124, :column 7, :end-line 124, :end-column 34, :arglists (quote ([impl-map]))}, :name facets.core/assert-existing-derivations, :variadic false, :file "src/facets/core.cljc", :end-column 34, :method-params ([impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([impl-map]))}, call {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 360, :column 7, :end-line 360, :end-column 11, :arglists (quote ([fk arg1 & args])), :doc "call facet f on args", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(fk arg1 args)], :arglists ([fk arg1 & args]), :arglists-meta (nil)}}, :name facets.core/call, :variadic true, :file "src/facets/core.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(fk arg1 args)], :arglists ([fk arg1 & args]), :arglists-meta (nil)}, :method-params [(fk arg1 args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 360, :end-line 360, :max-fixed-arity 2, :fn-var true, :arglists ([fk arg1 & args]), :doc "call facet f on args"}, assert-no-overides {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 116, :column 7, :end-line 116, :end-column 25, :arglists (quote ([old-impls new-impls]))}, :name facets.core/assert-no-overides, :variadic false, :file "src/facets/core.cljc", :end-column 25, :method-params ([old-impls new-impls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([old-impls new-impls]))}, declare-type {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 169, :column 7, :end-line 169, :end-column 19, :arglists (quote ([name & [constructor impl-map]])), :doc "declare a new datatype, attaching it the given constructor\n   and facets implementations.\n   ex:\n   (declare-type ::foo\n     identity\n     {:say-hello (fn [this] (println \"hello from foo\"))})", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name [constructor impl-map])], :arglists ([name & [constructor impl-map]]), :arglists-meta (nil)}}, :name facets.core/declare-type, :variadic true, :file "src/facets/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(name [constructor impl-map])], :arglists ([name & [constructor impl-map]]), :arglists-meta (nil)}, :method-params [(name [constructor impl-map])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists ([name & [constructor impl-map]]), :doc "declare a new datatype, attaching it the given constructor\n   and facets implementations.\n   ex:\n   (declare-type ::foo\n     identity\n     {:say-hello (fn [this] (println \"hello from foo\"))})"}, get-prefered-alias {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 208, :column 8, :end-line 208, :end-column 26, :private true, :arglists (quote ([xs type]))}, :private true, :name facets.core/get-prefered-alias, :variadic false, :file "src/facets/core.cljc", :end-column 26, :method-params ([xs type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([xs type]))}, assert-facet {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 90, :column 7, :end-line 90, :end-column 19, :arglists (quote ([name]))}, :name facets.core/assert-facet, :variadic false, :file "src/facets/core.cljc", :end-column 19, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, throw-alias-error {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 130, :column 7, :end-line 130, :end-column 24, :arglists (quote ([matches] [matches type])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([matches] [matches type]), :arglists ([matches] [matches type]), :arglists-meta (nil nil)}}, :name facets.core/throw-alias-error, :variadic false, :file "src/facets/core.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([matches] [matches type]), :arglists ([matches] [matches type]), :arglists-meta (nil nil)}, :method-params ([matches] [matches type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists ([matches] [matches type])}, extend-type {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 151, :column 7, :end-line 151, :end-column 18, :arglists (quote ([name impl-map])), :doc "assoc new facets implementation to existing type"}, :name facets.core/extend-type, :variadic false, :file "src/facets/core.cljc", :end-column 18, :method-params ([name impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name impl-map])), :doc "assoc new facets implementation to existing type"}, err {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 38, :column 7, :end-line 38, :end-column 10, :arglists (quote ([s]))}, :name facets.core/err, :variadic false, :file "src/facets/core.cljc", :end-column 10, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, reset-all! {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 30, :column 7, :end-line 30, :end-column 17, :arglists (quote ([]))}, :name facets.core/reset-all!, :variadic false, :file "src/facets/core.cljc", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, <alias {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 229, :column 7, :end-line 229, :end-column 13, :arglists (quote ([type]))}, :name facets.core/<alias, :variadic false, :file "src/facets/core.cljc", :end-column 13, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type]))}, derivations {:name facets.core/derivations, :file "src/facets/core.cljc", :line 12, :column 1, :end-line 12, :end-column 17, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 12, :column 6, :end-line 12, :end-column 17}}, assert-parents {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 101, :column 7, :end-line 101, :end-column 21, :arglists (quote ([parents]))}, :name facets.core/assert-parents, :variadic false, :file "src/facets/core.cljc", :end-column 21, :method-params ([parents]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parents]))}, reify {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 346, :column 7, :end-line 346, :end-column 12, :arglists (quote ([this parents-or-impl-map] [this parents impl-map])), :doc "anonymous type,\n   that can inherit from one or several existing types", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this parents-or-impl-map] [this parents impl-map]), :arglists ([this parents-or-impl-map] [this parents impl-map]), :arglists-meta (nil nil)}}, :name facets.core/reify, :variadic false, :file "src/facets/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this parents-or-impl-map] [this parents impl-map]), :arglists ([this parents-or-impl-map] [this parents impl-map]), :arglists-meta (nil nil)}, :method-params ([this parents-or-impl-map] [this parents impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 3, :fn-var true, :arglists ([this parents-or-impl-map] [this parents impl-map]), :doc "anonymous type,\n   that can inherit from one or several existing types"}, <f {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 322, :column 7, :end-line 322, :end-column 9, :arglists (quote ([facet this])), :doc "given a facet keyword and something,\n   return the registered or default implementation"}, :name facets.core/<f, :variadic false, :file "src/facets/core.cljc", :end-column 9, :method-params ([facet this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 322, :end-line 322, :max-fixed-arity 2, :fn-var true, :arglists (quote ([facet this])), :doc "given a facet keyword and something,\n   return the registered or default implementation"}, reified? {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 305, :column 7, :end-line 305, :end-column 15, :arglists (quote ([this]))}, :name facets.core/reified?, :variadic false, :file "src/facets/core.cljc", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, declare-alias {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 189, :column 7, :end-line 189, :end-column 20, :arglists (quote ([type sym])), :doc "register a type-alias\n   ex:\n   (declare-alias clojure.lang.PersistentVector ::vec)"}, :name facets.core/declare-alias, :variadic false, :file "src/facets/core.cljc", :end-column 20, :method-params ([type sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type sym])), :doc "register a type-alias\n   ex:\n   (declare-alias clojure.lang.PersistentVector ::vec)"}, <aliases {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 221, :column 7, :end-line 221, :end-column 15, :arglists (quote ([type])), :doc "return a set of all matched aliases for a given type"}, :name facets.core/<aliases, :variadic false, :file "src/facets/core.cljc", :end-column 15, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type])), :doc "return a set of all matched aliases for a given type"}, types {:name facets.core/types, :file "src/facets/core.cljc", :line 9, :column 1, :end-line 9, :end-column 11, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 9, :column 6, :end-line 9, :end-column 11}}, pstate {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 23, :column 7, :end-line 23, :end-column 13, :arglists (quote ([]))}, :name facets.core/pstate, :variadic false, :file "src/facets/core.cljc", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, t> {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 236, :column 7, :end-line 236, :end-column 9, :arglists (quote ([t & args])), :doc "generic constructor call.\n   apply the constructor of type t to args", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(t args)], :arglists ([t & args]), :arglists-meta (nil)}}, :name facets.core/t>, :variadic true, :file "src/facets/core.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(t args)], :arglists ([t & args]), :arglists-meta (nil)}, :method-params [(t args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 1, :fn-var true, :arglists ([t & args]), :doc "generic constructor call.\n   apply the constructor of type t to args"}, extend-facet {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 243, :column 7, :end-line 243, :end-column 19, :arglists (quote ([name impl-map])), :doc "assoc new implementations to existing facet"}, :name facets.core/extend-facet, :variadic false, :file "src/facets/core.cljc", :end-column 19, :method-params ([name impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name impl-map])), :doc "assoc new implementations to existing facet"}, assert-new-type {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 78, :column 7, :end-line 78, :end-column 22, :arglists (quote ([name]))}, :name facets.core/assert-new-type, :variadic false, :file "src/facets/core.cljc", :end-column 22, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name]))}, assert-type-impl-map {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 94, :column 7, :end-line 94, :end-column 27, :arglists (quote ([impl-map]))}, :name facets.core/assert-type-impl-map, :variadic false, :file "src/facets/core.cljc", :end-column 27, :method-params ([impl-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([impl-map]))}, declare-derived-type {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 336, :column 7, :end-line 336, :end-column 27, :arglists (quote ([name parents & [constructor impl-map]])), :doc "same as declare-type but inherit all impls of the given parents,\n   unless overiden via impl-map parameter", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(name parents [constructor impl-map])], :arglists ([name parents & [constructor impl-map]]), :arglists-meta (nil)}}, :name facets.core/declare-derived-type, :variadic true, :file "src/facets/core.cljc", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(name parents [constructor impl-map])], :arglists ([name parents & [constructor impl-map]]), :arglists-meta (nil)}, :method-params [(name parents [constructor impl-map])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 2, :fn-var true, :arglists ([name parents & [constructor impl-map]]), :doc "same as declare-type but inherit all impls of the given parents,\n   unless overiden via impl-map parameter"}, declare-facets {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 290, :column 7, :end-line 290, :end-column 21, :arglists (quote ([m]))}, :name facets.core/declare-facets, :variadic false, :file "src/facets/core.cljc", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, reified->impls {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 317, :column 7, :end-line 317, :end-column 21, :arglists (quote ([this]))}, :name facets.core/reified->impls, :variadic false, :file "src/facets/core.cljc", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, t= {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 65, :column 7, :end-line 65, :end-column 9, :arglists (quote ([x & xs])), :doc "check if all given args are of same type", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(x xs)], :arglists ([x & xs]), :arglists-meta (nil)}}, :name facets.core/t=, :variadic true, :file "src/facets/core.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(x xs)], :arglists ([x & xs]), :arglists-meta (nil)}, :method-params [(x xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists ([x & xs]), :doc "check if all given args are of same type"}, facets {:name facets.core/facets, :file "src/facets/core.cljc", :line 15, :column 1, :end-line 15, :end-column 12, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/facets/core.cljc", :line 15, :column 6, :end-line 15, :end-column 12}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:facets.core/parents :else :gen :type :facets.core/impl-map :facets.core/any :spec :id :constructor :facets :impl-map}, :order [:facets.core/any :type :constructor :impl-map :id :facets :spec :gen :facets.core/impl-map :facets.core/parents :else]}, :doc nil}