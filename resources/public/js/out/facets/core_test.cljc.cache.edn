{:rename-macros {}, :renames {}, :use-macros {are cljs.test, testing cljs.test, is cljs.test, deftest cljs.test}, :excludes #{}, :name facets.core-test, :imports nil, :requires {t cljs.test, cljs.test cljs.test, f facets.core, facets.core facets.core}, :uses {t facets.core, t? facets.core, t= facets.core}, :defs {e {:name facets.core-test/e, :file "/Users/pierrebaille/Code/Libs/facets/test/facets/core_test.cljc", :line 6, :column 1, :end-line 6, :end-column 7, :meta {:file "/Users/pierrebaille/Code/Libs/facets/test/facets/core_test.cljc", :line 6, :column 6, :end-line 6, :end-column 7}}, Yo {:meta {:file "/Users/pierrebaille/Code/Libs/facets/test/facets/core_test.cljc", :line 103, :column 14, :end-line 103, :end-column 16, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {yo [[x]]}}}, :protocol-symbol true, :name facets.core-test/Yo, :file "/Users/pierrebaille/Code/Libs/facets/test/facets/core_test.cljc", :end-column 16, :column 1, :line 103, :protocol-info {:methods {yo [[x]]}}, :info nil, :end-line 103, :impls #{cljs.core/IMeta}, :doc nil, :jsdoc ("@interface")}, yo {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/test/facets/core_test.cljc", :line 103, :column 18, :end-line 103, :end-column 20, :protocol facets.core-test/Yo, :doc nil, :arglists (quote ([x]))}, :protocol facets.core-test/Yo, :name facets.core-test/yo, :variadic false, :file "/Users/pierrebaille/Code/Libs/facets/test/facets/core_test.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc nil}}, :require-macros {t cljs.test, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{t x :facets.core-test/foo = :f2-obj :f1 :testing-contexts :facets.core-test/f3 :else t? :facets.core-test/fff f/extend-type f/call fn :type f/known-type? :facets.core-test/obj f/declare-facet f/extend-facet f/declare-type :fail :facets.core-test/f1 :f1-vec not :foo clojure.core/deref e :expected f/facets :f2-vec :facets.core-test/bar :error :pass :actual :facets.core-test/vec :f1-foo thrown? :facets.core-test/f2 t= and :message}, :order [:testing-contexts :type :expected :actual :message :error = t :facets.core-test/foo :pass :fail not t? t= :facets.core-test/f1 :facets.core-test/f2 :facets.core-test/vec :facets.core-test/obj :f1-foo :f1-vec :f2-vec :f2-obj thrown? e f/declare-type :foo :else f/known-type? f/declare-facet :f1 clojure.core/deref f/facets f/extend-type :facets.core-test/bar fn x :facets.core-test/f3 f/extend-facet and f/call :facets.core-test/fff]}, :doc nil}