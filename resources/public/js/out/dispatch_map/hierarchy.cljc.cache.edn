{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{isa?}, :name dispatch-map.hierarchy, :imports nil, :requires nil, :uses nil, :defs {IHierarchy {:meta {:file "/Users/pierrebaille/Code/Libs/facets/src/dispatch_map/hierarchy.cljc", :line 4, :column 14, :end-line 4, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-isa [[this child parent]]}}}, :protocol-symbol true, :name dispatch-map.hierarchy/IHierarchy, :file "/Users/pierrebaille/Code/Libs/facets/src/dispatch_map/hierarchy.cljc", :end-column 24, :column 1, :line 4, :protocol-info {:methods {-isa [[this child parent]]}}, :info nil, :end-line 4, :impls #{}, :doc nil, :jsdoc ("@interface")}, -isa {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/dispatch_map/hierarchy.cljc", :line 5, :column 4, :end-line 5, :end-column 8, :protocol dispatch-map.hierarchy/IHierarchy, :doc nil, :arglists (quote ([this child parent]))}, :protocol dispatch-map.hierarchy/IHierarchy, :name dispatch-map.hierarchy/-isa, :variadic false, :file "/Users/pierrebaille/Code/Libs/facets/src/dispatch_map/hierarchy.cljc", :end-column 8, :method-params ([this child parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 5, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this child parent])), :doc nil}, isa? {:protocol-inline nil, :meta {:file "/Users/pierrebaille/Code/Libs/facets/src/dispatch_map/hierarchy.cljc", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([hierarchy child parent])), :doc "Returns true if (= child parent), or child is directly or\n  indirectly derived from parent in hierarchy."}, :name dispatch-map.hierarchy/isa?, :variadic false, :file "/Users/pierrebaille/Code/Libs/facets/src/dispatch_map/hierarchy.cljc", :end-column 11, :method-params ([hierarchy child parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([hierarchy child parent])), :doc "Returns true if (= child parent), or child is directly or\n  indirectly derived from parent in hierarchy."}}, :require-macros nil, :doc nil}